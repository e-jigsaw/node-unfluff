// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var _, cache, candiateWords, fs, igo, loadTagger, path, removePunctuation, stopwords, tagger;
  path = require('path');
  fs = require('fs');
  _ = require('lodash');
  igo = require('../igo-javascript/build/igo.min.js');
  cache = {};
  loadTagger = function (dicdir) {
    var category, dicfiles, fileblobs, files, mtx, unk, wdc;
    dicfiles = [
      'char.category',
      'code2category',
      'word2id',
      'word.dat',
      'word.ary.idx',
      'word.inf',
      'matrix.bin'
    ];
    fileblobs = _.map(dicfiles, function (file) {
      return fs.readFileSync('' + dicdir + '/' + file);
    });
    files = _.zipObject(dicfiles, fileblobs);
    category = new igo.CharCategory(files.code2category, files['char.category']);
    wdc = new igo.WordDic(files.word2id, files['word.dat'], files['word.ary.idx'], files['word.inf']);
    unk = new igo.Unknown(category);
    mtx = new igo.Matrix(files['matrix.bin']);
    return new igo.Tagger(wdc, unk, mtx);
  };
  tagger = loadTagger('../igo-javascript/ipadic');
  module.exports = stopwords = function (content, language) {
    var count, filePath, overlappingStopwords, stopWords, strippedInput, words;
    if (null == language)
      language = 'en';
    filePath = path.join(__dirname, '..', 'data', 'stopwords', 'stopwords-' + language + '.txt');
    if (cache.hasOwnProperty(language)) {
      stopWords = cache[language];
    } else {
      stopWords = fs.readFileSync(filePath).toString().split('\n');
      cache[language] = stopWords;
    }
    strippedInput = removePunctuation(content);
    words = candiateWords(strippedInput, language);
    overlappingStopwords = [];
    count = 0;
    _.each(words, function (w) {
      count += 1;
      if (stopWords.indexOf(w.toLowerCase()) > -1)
        return overlappingStopwords.push(w.toLowerCase());
    });
    return {
      wordCount: count,
      stopwordCount: overlappingStopwords.length,
      stopWords: overlappingStopwords
    };
  };
  removePunctuation = function (content) {
    return content.replace(/[\|\@\<\>\[\]\"\'\.,-\/#\?!$%\^&\*\+;:{}=\-_`~()]/g, '');
  };
  candiateWords = function (strippedInput, language) {
    if (language === 'ja') {
      return tagger.wakati(strippedInput);
    } else {
      return strippedInput.split(' ');
    }
  };
}.call(this);
